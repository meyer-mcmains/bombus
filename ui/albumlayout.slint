import { Grid, Album, Theme, Logic } from "global.slint";
import { LargeTitle, Headline} from "typography.slint";
import { TrackLayout } from "tracklayout.slint";
import { TrackColumns } from "components.slint";

export component AlbumLayout inherits VerticalLayout {
    in property <int> selected-index;
    in property <int> items-per-row;
    in property <length> offset-x;
    in property <Album> album;
    property <int> tracks-first-column-length: Math.ceil(album.tracks.length / 2);
    property <bool> is-now-playing: Logic.now-playing-album == album.id;
    alignment: start;

    HorizontalLayout {
        x: mod(selected-index, items-per-row) * Grid.outer-width;
        height: 24px;
        width: Grid.inner-size;

        // Make a triangle
        Path {
            fill: Theme.color.system-fill-tertiary;
            commands: "M40 28.99H0c3.32 0 4-2 4-2L16.4 2.2c1.35-2.95 5.84-2.93 7.21 0L36 26.99s.69 2 4 2Z";
        }

        animate x {
            duration: 250ms;
            easing: ease-in-out;
        }
    }

    HorizontalLayout {
        Rectangle {
            background: Theme.color.system-fill-tertiary;
            border-radius: 16px;

            VerticalLayout {
                alignment: start;
                padding: 24px;

                HorizontalLayout {
                    alignment: space-between;

                    HorizontalLayout {
                        alignment: stretch;
                        padding-bottom: 16px;
                        spacing: 8px;

                        rect := Rectangle {
                            width: is-now-playing ? 2px : self.height;
                            border-radius: is-now-playing ? 2px : 8px;
                            background: play-pause.has-hover ? Theme.color.system_fill_tertiary : transparent;

                            states [
                                now-playing when is-now-playing: {
                                    rect.background: Theme.color.system-blue;
                                }
                                has-hover when play-pause.has-hover: {
                                    in {
                                        animate rect.background {
                                            duration: 250ms;
                                            easing: ease-in-out;
                                        }
                                    }
                                    out {
                                        animate rect.background {
                                            duration: 250ms;
                                            easing: ease-in-out;
                                        }
                                    }
                                }
                            ]

                            animate width {
                                duration: 250ms;
                                easing: ease-out;
                            }

                            VerticalLayout {
                                alignment: center;

                                HorizontalLayout {
                                    alignment: center;

                                    Image {
                                        visible: !is-now-playing;
                                        height: 24px;
                                        width: self.height;
                                        source: @image-url("../src/assets/play.svg");
                                        colorize: play-pause.has-hover ? Theme.color.system-blue : Theme.color.label-secondary;
                                        animate colorize {
                                            easing: ease-in;
                                            duration: 250ms;
                                        }
                                    }
                                }
                            }

                            play-pause := TouchArea {
                                mouse-cursor: pointer;
                                clicked => {
                                    Logic.play-album(album);
                                }
                            }
                        }

                        VerticalLayout {
                            Rectangle {
                                Headline {
                                    width: parent.width;
                                    text: album.artist;
                                }
                            }

                            Rectangle {
                                LargeTitle {
                                    width: parent.width;
                                    text: album.title;
                                }
                            }
                        }
                    }

                    LargeTitle {
                        text: album.year;
                        color: Theme.color.window-background.darker(1.0);
                        font-weight: 700;
                    }
                }

                TrackColumns {
                    album: album;
                }
            }
        }
    }
}
