import { Grid, Album, Theme } from "global.slint";
import { LargeTitle, Headline} from "typography.slint";
import { TrackLayout } from "tracklayout.slint";

export component AlbumLayout inherits VerticalLayout {
    in property <int> selected-index;
    in property <int> items-per-row;
    in property <length> offset-x;
    in property <Album> album;
    property <int> tracks-first-column-length: Math.ceil(album.tracks.length / 2);
    alignment: start;

    HorizontalLayout {
        x: mod(selected-index, items-per-row) * Grid.outer-width;
        height: 24px;
        width: Grid.inner-size;
        // Make a triangle
        Path {
            width: 100%;
            height: 24px;
            fill: Theme.color.system-fill-tertiary;
            MoveTo {
                x: 0;
                y: 24;
            }

            LineTo {
                x: 16;
                y: 0;
            }

            LineTo {
                x: 32;
                y: 24;
            }

            Close { }
        }

        animate x {
            duration: 250ms;
            easing: ease-in-out;
        }
    }

    HorizontalLayout {
        Rectangle {
            background: Theme.color.system-fill-tertiary;
            VerticalLayout {
                alignment: start;
                padding: 24px;
                VerticalLayout {
                    padding-bottom: 16px;
                    Rectangle {
                        Headline {
                            width: parent.width;
                            text: album.artist;
                        }
                    }

                    Rectangle {
                        LargeTitle {
                            width: parent.width;
                            text: album.title;
                        }
                    }
                }

                HorizontalLayout {
                    property <length> track-spacing: 3px;
                    property <length> track-height: 32px;
                    spacing: 12px;

                    VerticalLayout {
                        spacing: track-spacing;
                        height: tracks-first-column-length * (track-height + track-spacing);

                        for track [index] in album.tracks: Rectangle {
                            height: index < tracks-first-column-length ? track-height : 0;
                            visible: index < tracks-first-column-length;
                            if index < tracks-first-column-length: TrackLayout {
                                track: track;
                            }
                        }
                    }

                    VerticalLayout {
                        height: (album.tracks.length * (track-height + track-spacing)) - (tracks-first-column-length * (track-height + track-spacing));
                        spacing: track-spacing;

                        for track [index] in album.tracks: Rectangle {
                            height: index >= tracks-first-column-length ? track-height : 0;
                            visible: index >= tracks-first-column-length;
                            if index >= tracks-first-column-length: TrackLayout {
                                // take into account the offset off extra items
                                y: tracks-first-column-length * track-spacing * -1;
                                track: track;
                            }
                        }
                    }
                }
            }
        }
    }
}
