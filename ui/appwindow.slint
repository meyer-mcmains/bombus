import { ScrollView } from "std-widgets.slint";
import { Grid, Logic, Const, Album, Theme, Color } from "global.slint";
import { Cover } from "cover.slint";
import { AlbumLayout } from "albumlayout.slint";

export { Logic, Theme, Color }

export component AppWindow inherits Window {
    in property <[Album]> albums;
    in property <int> selected-index;
    title: "Bombus";
    background: Theme.color.window-background.darker(1.0);
    min-width: Grid.outer-width;
    min-height: Grid.outer-height;

    scroll-view := ScrollView {
        property <int> items_per_row: Math.floor(parent.width / Grid.outer-width);
        property <int> rows: Math.ceil(albums.length / items-per-row);
        // caculate the remaining width so we can manually center the items
        property <length> offset-x: (parent.width - (Grid.outer-width * items-per-row)) / 2;
        property <length> selected-y: Math.floor(selected-index / items-per-row) * Grid.outer-height;
        height: parent.height;
        width: parent.width;
        viewport-height: Grid.outer-height * rows + (selected-index == Const.i32-max ? 0 : album-layout.min-height + 24px);

        album-layout := AlbumLayout {
            visible: albums.length > 0;
            y: Math.floor(selected-index / items-per-row) * Grid.outer-height + Grid.outer-height;
            x: offset-x + Grid.spacing;
            width: parent.width - offset-x * 2 - Grid.spacing * 2;
            selected-index: selected-index;
            items-per-row: items-per-row;
            offset-x: offset-x;
            album: albums[selected-index];
        }

        // loop over albums creating the grid
        for album [index] in albums: touch := TouchArea {
            property <length> pos-y: Math.floor(index / items-per-row) * Grid.outer-height;
            x: mod(index, items-per-row) * Grid.outer-width + offset-x;
            y: pos-y > selected-y ? pos-y + album-layout.min-height + 24px : pos-y;
            height: Grid.outer-height;
            width: Grid.outer-width;
            mouse-cursor: pointer;
            clicked => {
                scroll-view.viewport-y = - pos-y;
                Logic.album-clicked(index, album);
            }

            cover := Cover {
                album: albums[index];
                index: index;
                touch-has-hover: touch.has-hover;
                touch-pressed: touch.pressed;
            }
        }
    }
}
