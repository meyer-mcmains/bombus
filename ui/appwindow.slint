import { ScrollView } from "std-widgets.slint";
import { Grid, Logic, Const, Album, Theme } from "global.slint";
import { Cover } from "cover.slint";
import { AlbumLayout } from "albumlayout.slint";

export { Logic, Theme }

export component AppWindow inherits Window {
    in property <[Album]> albums;
    in property <int> selected-index;
    background: Theme.system-grey-6;
    min-width: Grid.outer-width;
    min-height: Grid.outer-height;
    ScrollView {
        property <int> items_per_row: Math.floor(parent.width / Grid.outer-width);
        property <int> rows: Math.ceil(albums.length / items-per-row);
        // caculate the remaining width so we can manually center the items
        property <length> offset-x: (parent.width - (Grid.outer-width * items-per-row)) / 2;
        property <length> selected-y: Math.floor(selected-index / items-per-row) * Grid.outer-height;
        height: parent.height;
        width: parent.width;
        viewport-height: Grid.outer-height * rows + (selected-index == Const.i32-max ? 0 : Grid.outer-height);

        AlbumLayout {
            y: Math.floor(selected-index / items-per-row) * Grid.outer-height + Grid.outer-height;
            height: selected-index == Const.i32-max ? 0 : Grid.outer-height;
            selected-index: selected-index;
            items-per-row: items-per-row;
            offset-x: offset-x;
            album: albums[selected-index];
        }

        // loop over albums creating the grid
        for album [index] in albums: Rectangle {
            property <length> pos-y: Math.floor(index / items-per-row) * Grid.outer-height;
            x: mod(index, items-per-row) * Grid.outer-width + offset-x;
            y: pos-y > selected-y ? pos-y + Grid.outer-height : pos-y;
            height: Grid.outer-height;
            width: Grid.outer-width;
            cover := Cover {
                album: albums[index];
                index: index;
            }
        }
    }
}
