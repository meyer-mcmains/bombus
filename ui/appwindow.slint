import { ScrollView } from "std-widgets.slint";
import { Grid, Logic, Const, Album, Theme, Color, Library, Track, Selected } from "global.slint";
import { Cover } from "cover.slint";
import { AlbumLayout } from "albumlayout.slint";
import { Title3, BodySmall} from "typography.slint";
import { Launch } from "launch.slint";

export { Logic, Theme, Color, Selected }

export component AppWindow inherits Window {
    in property <[Album]> albums;
    in property <bool> has-frame: false;
    in property <int> selected-index: Const.i32-max;
    in property <[Library]> libraries;
    title: "Bombus";
    background: albums.length > 0 ? Theme.color.window-background.darker(1.0) : transparent;
    min-width: 400px;
    min-height: 448px;
    no-frame: !has-frame;

    if albums.length == 0: Launch {
        libraries: libraries;
    }

    scroll-view := ScrollView {
        property <int> items_per_row: Math.floor(parent.width / Grid.outer-width);
        property <int> rows: Math.ceil(albums.length / items-per-row);
        // caculate the remaining width so we can manually center the items
        property <length> offset-x: (parent.width - (Grid.outer-width * items-per-row)) / 2;
        property <length> selected-y: Math.floor(selected-index / items-per-row) * Grid.outer-height;

        visible: albums.length > 0;
        height: parent.height;
        width: parent.width;
        viewport-height: Grid.outer-height * rows + (selected-index == Const.i32-max ? 0 : album-layout.min-height + 24px);

        album-layout := AlbumLayout {
            visible: albums.length > 0;
            y: Math.floor(selected-index / items-per-row) * Grid.outer-height + Grid.outer-height;
            x: offset-x + Grid.spacing;
            width: parent.width - offset-x * 2 - Grid.spacing * 2;
            selected-index: selected-index;
            items-per-row: items-per-row;
            offset-x: offset-x;
            album: albums[selected-index];
        }

        // loop over albums creating the grid
        for album[index] in albums: VerticalLayout {
            property <length> pos-y: Math.floor(index / items-per-row) * Grid.outer-height;
            x: mod(index, items-per-row) * Grid.outer-width + offset-x;
            y: pos-y > selected-y ? pos-y + album-layout.min-height + 24px : pos-y;
            height: Grid.outer-height;
            width: Grid.outer-width;
            padding-left: Grid.spacing;
            padding-right: Grid.spacing;
            alignment: center;
            spacing: touch.has-hover ? 12px : 8px;
            animate spacing {
                duration: 250ms;
                easing: ease-in-out;
            }

            touch := TouchArea {
                mouse-cursor: pointer;
                clicked => {
                    // only scroll when opening an album
                    if index != selected-index {
                        scroll-view.viewport-y = - pos-y;
                    }
                    Logic.album-clicked(index);
                    Logic.apply_track_sorting(albums[index])
                }

                cover := Cover {
                    album: albums[index];
                    index: index;
                    touch-has-hover: touch.has-hover;
                    touch-pressed: touch.pressed;
                }
            }

            VerticalLayout {
                spacing: 4px;
                padding-left: 8px;
                padding-right: 8px;
                alignment: start;
                property <bool> is-now-playing: Logic.now-playing-album == albums[index].id;

                Title3 {
                    overflow: elide;
                    color: is-now-playing ? Theme.color.system-blue : Theme.color.label-secondary;
                    text: albums[index].title;
                    horizontal-alignment: center;
                }

                BodySmall {
                    overflow: elide;
                    text: albums[index].artist;
                    horizontal-alignment: center;
                    color: is-now-playing ? Theme.color.system-blue.transparentize(0.35) : Theme.color.label-tertiary;
                }
            }
        }
    }
}
